---
editor_options: 
  chunk_output_type: console
---
```{r blood pressure}
#| echo: false
#| results: asis

bpsys <-
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) &
      is.na(subjinfo$redcap_repeat_instrument) &
      !is.na(subjinfo$bpsys),
    grepl("bpsys", colnames(subjinfo)),
    drop = TRUE
  ]

bpdias <-
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) &
      is.na(subjinfo$redcap_repeat_instrument) &
      !is.na(subjinfo$bpdias),
    grepl("bpdias", colnames(subjinfo)),
    drop = TRUE
  ]


bpsys_cat <- BRIDGE21:::classify_blood_pressure(bpsys, type = "systolic")

bpdias_cat <- BRIDGE21:::classify_blood_pressure(bpdias, type = "diastolic")

bp_cat <-
  ifelse(
    bpsys_cat == "Low" | bpdias_cat == "Low",
    "Low BP",
    ifelse(
      bpsys_cat == "Normal" & bpdias < 80,
      "Normal",
      ifelse(
        bpsys_cat == "Elevated" & bpdias < 80,
        "Elevated",
        ifelse(bpsys_cat == "High" | bpdias >= 80, "High", "Normal")
      )
    )
  )


if (length(bpsys) >= 1) {
  paste("", "\\input{sections/lifestyle/latex/bp.tex}", "") |>
    cat(sep = "\n")
  bpdata <-
    data.frame(
      dates = format(dates$date_of_visit, "%m/%d/%Y"),
      bpsys,
      bpdias,
      bp_cat
    )

  bpft <-
    flextable::flextable(bpdata) |>
    flextable::set_header_labels(
      values = c("Date", "Systolic", "Diastolic", "Cateogry")
    ) |>
    flextable::width(j = 1:3, width = 0.7) |>
    flextable::width(j = 4, width = 1.25) |>
    flextable::align(j = 1:4, part = "all", align = "center") |>
    flextable::bold(i = 1, part = "header") |>
    flextable::height(height = 0.25) |>
    flextable::hrule(rule = "exact")

  bp_plot <-
    BRIDGE21::generate_bp_plot(
      bpsys = bpdata$bpsys[length(bpdata$bpsys)],
      bpdia = bpdata$bpdias[length(bpdata$bpdias)]
    ) +
    patchwork::inset_element(
      flextable::gen_grob(bpft, fit = "width"),
      left = 0.05,
      bottom = 0.6,
      right = 0.5,
      top = 0.85
    ) +
    patchwork::inset_element(
      grid::textGrob(
        label = "Blood Pressure History",
        gp = grid::gpar(fontface = "bold")
      ),
      left = 0.05,
      bottom = 0.87,
      right = 0.5,
      top = 0.87
    )

  ggplot2::ggsave(
    filename = "bp_plot.png",
    plot = bp_plot,
    width = 8,
    height = 6,
    dpi = 300
  )
}


```

![](bp_plot.png)

\newpage

```{r accelerometer text and plot}
#| echo: false
#| results: asis

if (!params$accelres == "~") {
  accelMetaDir <- file.path(params$accelres, "output_data", "meta")
  accelResDir <- file.path(params$accelres, "output_data", "results")

  dayMMFile <- list.files(accelResDir, "day.*MM", full.names = TRUE)
  accel_df <- readr::read_csv(dayMMFile, show_col_types = FALSE)

  accel_df_subset <- BRIDGE21:::retrieve_accel_summary(data = accel_df)

  paSleepSuccess <- sum(
    accel_df_subset$dur_spt_min >= 480 &
      accel_df_subset$dur_day_total_MVPA_min >= 30
  )

  if (length(accel_df) >= 1) {
    ltexPA <- paste(
      readLines("sections/lifestyle/latex/activity.tex"),
      collapse = "\n"
    )
    ltexPA <- glue::glue(
      ltexPA,
      paSleepSuccess = paste0("{", paSleepSuccess, "}"),
      accelDaysMonitored = paste0("{", nrow(accel_df), "}"),
      .open = "{{",
      .close = "}}"
    )
    cat(paste0("", ltexPA, ""), sep = "\n")
  }

  load(list.files(
    file.path(accelMetaDir, "ms2.out"),
    recursive = TRUE,
    full.names = TRUE
  ))
  IMPdates <- unique(as.Date(IMP$metashort$timestamp))
  IMPremove <- IMPdates[
    !IMPdates %in% as.Date(accel_df_subset$date, "%m/%d/%Y")
  ]
  IMP$metashort <- IMP$metashort[
    !as.Date(IMP$metashort$timestamp) %in% IMPremove,
  ]
  accel_plot <- BRIDGE21::plot_time_series_by_date(
    IMP,
    summary_data = accel_df_subset
  )

  ggplot2::ggsave(
    filename = "accelerometer_plot.png",
    accel_plot,
    width = 11,
    height = 8,
    dpi = 300
  )

  paste("", "![](accelerometer_plot.png)", "") |>
    cat(sep = "\n")
}

```



\newpage

<!--- Body Mass Index --->

```{r body mass index, ft.align = "left"}
#| echo: false
#| results: asis

weight_lbs <-
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) &
      is.na(subjinfo$redcap_repeat_instrument) &
      !is.na(subjinfo$weight),
    grepl("weight", colnames(subjinfo)),
    drop = TRUE
  ]

height_in <-
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) &
      is.na(subjinfo$redcap_repeat_instrument) &
      !is.na(subjinfo$height),
    grepl("height", colnames(subjinfo)),
    drop = TRUE
  ]

if (length(weight_lbs) >= 1 & length(weight_lbs) == length(height_in)) {
  weight_lbs_last = weight_lbs[length(weight_lbs)]
  height_in_last = height_in[length(height_in)]
  weight_kg <- round(weight_lbs / 2.205, 2)
  height_cm <- round(height_in * 2.54, 2)
  height_m <- round(height_cm / 100, 2)
  bmi <- round(weight_kg / height_m^2, 2)
  bmi_last <- bmi[length(bmi)]

  paste("", "\\input{sections/lifestyle/latex/bmi.tex}", "") |>
    cat(sep = "\n")

  bmi_df <- data.frame(
    date = format(dates$date_of_visit, "%m/%d/%Y"),
    weight_kg,
    height_cm,
    bmi
  )

  bmift <-
    flextable::flextable(bmi_df) |>
    flextable::set_header_labels(
      values = c("Date", "Weight (kg)", "Height (cm)", "BMI")
    ) |>
    flextable::width(j = 1:4, width = 1) |>
    flextable::hrule(rule = "exact") |>
    flextable::height_all(height = 0.25) |>
    flextable::bold(i = 1, part = "header") |>
    flextable::align(part = "all", align = "center") |>
    flextable::fontsize(j = 1:4, part = "all", size = 14) |>
    flextable::gen_grob(fit = "width")

  bmift_pw <- patchwork::wrap_elements(full = bmift)

  bmi_plot <- BRIDGE21::generate_bmi_arch_plot(weight_lbs_last, height_in_last)

  weight_plot <- BRIDGE21::generate_weight_bar_plot(
    weight_lbs_last,
    height_in_last
  )

  bmi_weight_plot <-
    (patchwork::plot_spacer() /
      bmift_pw +
      patchwork::plot_layout(heights = c(1, 3)) |
      patchwork:::`/.ggplot`(bmi_plot, weight_plot) +
        patchwork::plot_layout(heights = c(3, 1))) +
    patchwork::plot_layout(widths = c(1, 1)) +
    patchwork::plot_annotation(
      title = "Weight and Body Mass Index Visit History",
      subtitle = paste(
        "Your Body Mass Index:",
        round(bmi_last, 1),
        "kg/m\u00B2"
      ),
      theme = ggplot2::theme(
        plot.title = ggplot2::element_text(
          size = 24,
          hjust = 0.5,
          face = "bold"
        ),
        plot.subtitle = ggplot2::element_text(size = 18, hjust = 0.5)
      )
    )

  ggplot2::ggsave(
    filename = "bmi_weight_plot.png",
    bmi_weight_plot,
    width = 11,
    height = 6,
    dpi = 300
  )
}


```

![](bmi_weight_plot.png)

\newpage

<!--- Body Composition --->

```{r body composition, ft.align = "left"}
#| echo: false
#| results: asis

if (length(fitness_date) >= 1) {
  bodycomp <- data.frame(
    date = format(as.Date(fitness_date), "%m/%d/%Y"),
    lean_tissue = ifelse(lean_tissue == -999, NA, lean_tissue),
    fat_tissue = ifelse(fat_tissue == -999, NA, fat_tissue),
    fat_tissue_percent = ifelse(fat_tissue_percent == -999, NA, fat_tissue_percent),
    bone_mineral_density = ifelse(bone_mineral_density == -999, NA, bone_mineral_density)
  )

  missing_dxa <- apply(bodycomp[, 2:5], 1, FUN = function(x) all(is.na(x)))

  if (!missing_dxa) {
    # Print .tex blurb
    paste("", "\\input{sections/lifestyle/latex/dxa.tex}", "") |> cat(sep = "\n")

    # Create flextable and convert to grob
    bodycomp_ft <- flextable::flextable(bodycomp) |>
      flextable::set_header_labels(
        values = c(
          "Date",
          "Lean Tissue (g)",
          "Fat Tissue (g)",
          "Fat Tissue (%)",
          "Bone Mineral Density (z-score)"
        )
      ) |>
      flextable::width(j = 1:5, width = 1.25) |>
      flextable::align(part = "all", align = "center") |>
      flextable::fontsize(part = "all", size = 12) |>
      flextable::bold(part = "header") |>
      flextable::gen_grob(fit = "width")

    bodycomp_grob <- patchwork::wrap_elements(full = bodycomp_ft)

    # Generate plot
    fat_percent_last <- tail(na.omit(fat_tissue_percent), 1)
    fittest_date_last <- tail(na.omit(fitness_date), 1)
    dob <- subjinfo$subject_birthdate[1]

    bfp_plot <- BRIDGE21::generate_body_fat_plot(
      total_fat = fat_percent_last,
      subject_sex = subject_sex,
      subject_birthdate = dob,
      fittest_date = fittest_date_last
    )

  
  dxa_plot_combined <-
  bodycomp_grob / bfp_plot +
  patchwork::plot_layout(heights = c(1, 1.5)) +
  patchwork::plot_annotation(
    title = "Body Composition Visit History",
    subtitle = paste("Most recent total fat:", fat_percent_last, "%"),
    theme = ggplot2::theme(
      plot.title = ggplot2::element_text(size = 24, hjust = 0.5, face = "bold"),
      plot.subtitle = ggplot2::element_text(size = 18, hjust = 0.5)
    )
  )

    ggplot2::ggsave(
      filename = "dxa_combined_plot.png",
      plot = dxa_plot_combined,
      width = 11,
      height = 6,
      dpi = 300
    )
    paste("", "\\input{sections/lifestyle/latex/after-dxa.tex}", "") |> cat(sep = "\n")
  }
}

```

<!--- Diet Questionnaire --->

```{r diet questionnaire, ft.align = "left"}
#| echo: false
#| results: asis
#| include: false

# load(system.file("extdata/constants.RData", package = "ncidsq"))

# ncidsqvars <- constants$fm_equation_coeff$variable[!grepl("_low|_high", constants$fm_equation_coeff$variable)]

# dsqdata <-
#   ncidsq::get_dsq(
#     data = df, id = "ptid", timepoint = "redcap_event_name",
#     birthdate = "subject_birthdate", reference = "kumc",
#     visitdate = c("visityr", "visitmo", "visitday")) %>%
#     dplyr::select(ptid, visitdate, sex, dplyr::all_of(ncidsqvars)) %>%
#     dplyr::filter(!dplyr::if_all(dplyr::all_of(ncidsqvars), is.na))

# paste("", "\\input{sections/lifestyle/latex/diet.tex}", "") |>
#     cat(sep = "\n")

```
