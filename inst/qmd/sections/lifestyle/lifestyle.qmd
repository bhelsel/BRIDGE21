---
editor_options: 
  chunk_output_type: console
---
```{r blood pressure, ft.align = "left"}
#| echo: false
#| results: asis

bpsys <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$bpsys), 
    grepl("bpsys", colnames(subjinfo)), drop = TRUE]

bpdias <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$bpdias), 
    grepl("bpdias", colnames(subjinfo)), drop = TRUE]

bpsys_cat <- 
  cut(bpsys, breaks = c(-Inf, 90, 120, 130, Inf),
      labels = c("Low", "Normal", "Elevated Risk", "High Risk"), right = FALSE)


bpdias_cat <- 
  cut(bpdias, breaks = c(-Inf, 60, 80, 90, Inf),
      labels = c("Low", "Normal", "Elevated Risk", "High Risk"), right= FALSE)

bp_cat <- 
  ifelse(bpsys_cat == "Low" | bpdias_cat == "Low", "Low BP",
           ifelse(bpsys_cat == "Normal" & bpdias < 80, "Normal",
           ifelse(bpsys_cat == "Elevated Risk" & bpdias < 80, "Elevated Risk",
           ifelse(bpsys_cat == "High Risk" | bpdias >= 80, "High Risk", "Normal"))))


if(length(bpsys) >= 1){
  cat("\\subsection{Blood Pressure}")
  bpdata <- data.frame(
    dates = format(dates$date_of_visit, "%m/%d/%Y"), 
    bpsys, bpdias, bpdias_cat)
  flextable::flextable(bpdata) |>
    flextable::set_header_labels(values = c("Date", "Systolic", "Diastolic", "Risk Cateogry")) |>
    flextable::width(j = 4, width = 1.25) |>
    flextable::align(j = 1:4, part = "all", align = "center") |>
    flextable::bold(i = 1, part = "header")
}


```

```{r bp plot}
#| echo: false
#| results: asis
colors <- c("#ADD8E6", "#90EE90", "#FDEE8C", "#FF7F7F")

generate_base_bp_plot <- function(values, categories, colors) {
  midpoints <- sapply(1:(length(values)-1), FUN = function(x){
    (values[x] + values[x + 1]) / 2
  })

  ggplot2::ggplot() +
    ggplot2::geom_rect(ggplot2::aes(xmin = 0, xmax = max(values), ymin = -2, ymax = 3), fill = "#FFFFFF") +
    ggplot2::geom_rect(ggplot2::aes(
      xmin = values[1:length(values)-1],
      xmax = values[2:length(values)],
      ymin = 0, ymax = 1),
      fill = colors, color = "black") +
    ggplot2::annotate("text", y = -0.7, x = midpoints, label = categories) 
}

bp_visual <- function(bpsys, bpdias, bp_cat, values = c(0, 15, 35, 60, 85), categories = c("Low BP", "Normal", "Elevated Risk", "High Risk"), colors = colors) {
  base <- generate_base_bp_plot(values, categories, colors)

  highlight_value <- ifelse(bp_cat == "High Risk", 72.5, 
                            ifelse(bp_cat == "Elevated Risk", 47.5, 
                                   ifelse(bp_cat == "Low BP", 7.5, 25)))

  overallplot <- base +
    ggplot2::annotate("text", x = 0, y = 2.2, fontface = "bold", size = 5,
                     label = paste("Overall Blood Pressure Category:", bp_cat), hjust = 0) +
    ggplot2::annotate("segment", y = 0, yend = 1, x = highlight_value, linetype = "dashed") +
    ggplot2::annotate("segment", y = 1.5, yend = 1.1, x = highlight_value,
                      arrow = ggplot2::arrow(length = grid::unit(0.02, "npc"))) +
    ggplot2::annotate("text", x = highlight_value, y = 1.65, label = "Your Blood Pressure", fontface = "bold") +
    ggplot2::theme_minimal() +
    ggplot2::theme(
      panel.grid.major = ggplot2::element_blank(),
      panel.grid.minor = ggplot2::element_blank(),
      plot.title = ggplot2::element_text(hjust = 0.4, size = 12),
      plot.subtitle = ggplot2::element_text(hjust = 0.5, size = 12, face = "bold"),
      axis.text.y = ggplot2::element_blank(),
      axis.title = ggplot2::element_blank(),
      axis.text = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank())
}

sys_bp_visual <- function(bpsys, values = c(0, 90, 120, 130, 200), categories = c("Low BP", "Normal", "Elevated Risk", "High Risk"), colors = colors) {
  bpsys_cat <- cut(bpsys, breaks = c(-Inf, 90, 120, 130, Inf),
                   labels = c("Low BP", "Normal", "Elevated Risk", "High Risk"), right = FALSE)
  base <- generate_base_bp_plot(values, categories, colors)

  plot <- base +
    ggplot2::annotate("text", x = 0, y = 3.0, fontface = "bold", size = 4,
                     label = paste("Systolic Blood Pressure Category:", bpsys_cat), hjust = 0) +
    ggplot2::annotate("segment", y = 0, yend = 1, x = bpsys, linetype = "dashed", color = "black") +
    ggplot2::annotate("segment", y = 1.5, yend = 1.1, x = bpsys,
                      arrow = ggplot2::arrow(length = grid::unit(0.02, "npc")), color = "black") +
    ggplot2::annotate("text", x = bpsys, y = 1.9, label = paste("Your Systolic BP:", bpsys), fontface = "bold", color = "black") +
   ggplot2::theme_minimal() +
    ggplot2::theme(
      panel.grid.major = ggplot2::element_blank(),
      panel.grid.minor = ggplot2::element_blank(),
      plot.title = ggplot2::element_text(hjust = 0.4, size = 12),
      plot.subtitle = ggplot2::element_text(hjust = 0.5, size = 12, face = "bold"),
      axis.text.y = ggplot2::element_blank(),
      axis.title = ggplot2::element_blank(),
      axis.text = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank())
  return(plot)
}

dias_bp_visual <- function(bpdias, values = c(0, 60, 80, 90, 120), categories = c("Low BP", "Normal", "Elevated Risk", "High Risk"), colors = colors) {
  bpdias_cat <- cut(bpdias, breaks = c(-Inf, 60, 80, 90, Inf),
                    labels = c("Low BP", "Normal", "Elevated Risk", "High Risk"), right = FALSE)
  base <- generate_base_bp_plot(values, categories, colors)

  plot <- base +
    ggplot2::annotate("text", x = 0, y = 3.0, fontface = "bold", size = 4,
                     label = paste("Diastolic Blood Pressure Category:", bpdias_cat), hjust = 0) +
    ggplot2::annotate("segment", y = 0, yend = 1, x = bpdias, linetype = "dashed", color = "black") +
    ggplot2::annotate("segment", y = 1.5, yend = 1.1, x = bpdias,
                      arrow = ggplot2::arrow(length = grid::unit(0.02, "npc")), color = "black") +
    ggplot2::annotate("text", x = bpdias, y = 1.8, label = paste("Your Diastolic BP:", bpdias), fontface = "bold", color = "black") +
   ggplot2::theme_minimal() +
    ggplot2::theme(
      panel.grid.major = ggplot2::element_blank(),
      panel.grid.minor = ggplot2::element_blank(),
      plot.title = ggplot2::element_text(hjust = 0.4, size = 12),
      plot.subtitle = ggplot2::element_text(hjust = 0.5, size = 12, face = "bold"),
      axis.text.y = ggplot2::element_blank(),
      axis.title = ggplot2::element_blank(),
      axis.text = ggplot2::element_blank(),
      panel.border = ggplot2::element_blank())
  return(plot)
}
bp_category_plot <- bp_visual(bpsys = bpsys, bpdias = bpdias, bp_cat = bp_cat, colors = colors)
sys_plot <- sys_bp_visual(bpsys = bpsys, colors = colors)
dias_plot <- dias_bp_visual(bpdias = bpdias, colors = colors)
gridExtra::grid.arrange(bp_category_plot, sys_plot, dias_plot, ncol = 1, heights = c(3, 2, 2)) 

```

```{r accelerometer text}
#| echo: false
#| results: asis

accelMetaDir <- file.path(params$accelres, "output_data", "meta")
accelResDir <- file.path(params$accelres, "output_data", "results")


dayMMFile <- list.files(accelResDir, "day.*MM", full.names = TRUE)
accel_df <- readr::read_csv(dayMMFile, show_col_types = FALSE)

accel_df_subset <- cbind(
  date = accel_df$calendar_date, 
  dur_spt_min = accel_df$dur_spt_min, 
  accel_df[, grep("total.*min", colnames(accel_df))])

accel_df_subset$dur_day_total_MVPA_min <- accel_df_subset$dur_day_total_MOD_min + accel_df_subset$dur_day_total_VIG_min
accel_df_subset$dur_day_total_MOD_min <- accel_df_subset$dur_day_total_VIG_min <- NULL

accel_df_subset_per <- 
  data.frame(
    date = accel_df_subset$date, 
    apply(
      accel_df_subset[, 2:5], 2, 
      FUN = function(x) x / rowSums(accel_df_subset[, 2:5])) * 100
    )

accel_df_subset[, 2:5] <- round(accel_df_subset[, 2:5])
accel_df_subset$date <- format(accel_df_subset$date, "%m/%d/%Y")

paSleepSuccess <- sum(accel_df_subset$dur_spt_min >= 480 & accel_df_subset$dur_day_total_MVPA_min >= 30)

if(length(accel_df) >= 1){
  ltexPA <- paste(readLines("sections/lifestyle/latex/activity.tex"), collapse = "\n")
  ltexPA <- glue::glue(
    ltexPA, paSleepSuccess = paste0("{", paSleepSuccess, "}"),
    accelDaysMonitored = paste0("{", nrow(accel_df), "}"), .open = "{{", .close = "}}"
    )
  cat(paste0("", ltexPA, ""), sep = "\n")
}

```

```{r accelerometer table, ft.align="left"}
#| echo: false

flextable::flextable(accel_df_subset) |>
  flextable::set_header_labels(
    values = c("Date", "Sleep", "Inactivity", "Light", "MVPA")
  ) |>
  flextable::width(j = 1, width = 1) |>
  flextable::align(j = 1:5, part = "all", align = "center") |>
  flextable::bold(i = 1, part = "header", bold = TRUE) |>
  flextable::add_footer_row(
    values = "MVPA: Moderate-to-Vigorous Physical Activity", 
    colwidths = 5) |>
  flextable::add_footer_row(
    values = "Sleep and Activity are Measured in Minutes per Day",
    colwidths = 5) |>
  flextable::bg(i = ~ dur_spt_min > 480 & dur_day_total_MVPA_min > 30, bg = "#87CEEB")

```

```{r accelerometer plot}
#| echo: false
#| fig-width: 8
#| fig-height: 6
#| fig-dpi: 300

load(list.files(file.path(accelMetaDir, "ms2.out"), recursive = TRUE, full.names = TRUE))
IMPdates <- unique(as.Date(IMP$metashort$timestamp))
IMPremove <- IMPdates[!IMPdates %in% as.Date(accel_df_subset$date, "%m/%d/%Y")]
IMP$metashort <- IMP$metashort[!as.Date(IMP$metashort$timestamp) %in% IMPremove, ]
BRIDGE21::plot_time_series_by_date(IMP)

```

<!--- Body Mass Index --->

```{r body mass index, ft.align = "left"}
#| echo: false
#| results: asis

weight_lbs <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$weight), 
    grepl("weight", colnames(subjinfo)), drop = TRUE]

height_in <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$height), 
    grepl("height", colnames(subjinfo)), drop = TRUE]

if(length(weight_lbs) >= 1 & length(weight_lbs) == length(height_in)) {
  weight_kg <- round(weight_lbs / 2.205, 2)
  height_cm <- round(height_in * 2.54, 2)
  height_m <- round(height_cm / 100, 2)
  bmi <- round(weight_kg / height_m^2, 2)
  
  paste("", "\\input{sections/lifestyle/latex/bmi.tex}", "") |> 
    cat(sep = "\n")
  
  bmi_df <- data.frame(
    date = format(dates$date_of_visit, "%m/%d/%Y"), 
    weight_kg, height_cm, bmi
    )
  
  flextable::flextable(bmi_df) |>
    flextable::set_header_labels(
      values = c("Date", "Weight (kg)", "Height (cm)", "BMI")
    ) |>
    flextable::width(j = 1:4, width = 1) |>
    flextable::align(part = "all", align = "center")
  
}

```

<!--- Body Composition --->

```{r body composition, ft.align = "left"}
#| echo: false
#| results: asis

fitness_date <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$fittest_date), 
    grepl("fittest_date", colnames(subjinfo)), drop = TRUE]

lean_tissue <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$lean), 
    grepl("lean", colnames(subjinfo)), drop = TRUE]

fat_tissue <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$fat), 
    which(colnames(subjinfo) == "fat"), drop = TRUE]

fat_tissue_percent <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$total_fat), 
    grepl("total_fat", colnames(subjinfo)), drop = TRUE]

bone_mineral_density <- 
  subjinfo[
    grepl("visit", subjinfo$redcap_event_name) & 
      is.na(subjinfo$redcap_repeat_instrument) & 
      !is.na(subjinfo$bmc), 
    grepl("bmc", colnames(subjinfo)), drop = TRUE]

if(length(fitness_date) >= 1){
  
  bodycomp <- data.frame(
    date = format(as.Date(fitness_date), "%m/%d/%Y"),
    lean_tissue, fat_tissue, fat_tissue_percent, bone_mineral_density
  )
  
  paste("", "\\input{sections/lifestyle/latex/dxa.tex}", "") |> 
    cat(sep = "\n")
  
  flextable::flextable(bodycomp) |>
    flextable::set_header_labels(
      values = c("Date", "Lean Tissue (g)", "Fat Tissue (g)",
                 "Fat Tissue (%)", "Bone Mineral Density (g)")) |>
    flextable::width(j = 1:5, width = 1.25) |>
    flextable::align(part = "all", align = "center")
  
 
}



```

<!--- Diet Questionnaire --->

```{r diet questionnaire, ft.align = "left"}
#| echo: false
#| results: asis


paste("", "\\input{sections/lifestyle/latex/diet.tex}", "") |> 
    cat(sep = "\n")


```
